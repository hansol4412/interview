스프링
프레임워크란 ?
특정한 틀을 만들어 놓고 거기에 살을 붙여 놓음으로써 프로그램을 만드는 것입니다. 소프트웨어를 만들 때 뼈대가 되는 클래스, 인터페이스, 메서드 등을 미리 구현합니다.
중요한 이유 : 프로그램 개발에 투입되는 개발자가 늘어남에 따라서 전체 시스템의 통합성, 일관성이 부족, 개발 스킬의 차이가 큰 경우 이해하기 힘든 경우 발생하면서 코드의 품질이 떨어 질 수 있음.
장단점 : 미리 구현해둔 코드를 사용하기 때문에 빨리 개발 할 수 있지만 익숙해지는데 시간이 걸릴 수 있고 의존성이 커지면 언어를 배우는 것이 아니라 프레임워크를 배우게 됩니다.
↔ 라이브러리 : 틀과 구조를 결정한다는 측면에서 프레임워크와 활용도가 유사하지만 특정 기능이 필요한 경우 호출해서 사용하는 것. 프레임워크는 꼭 써야하는 틀이 있는 반면에 라이브러리는 필요한 기능을 호출해서 능동적으로 사용하는 것.

⭐ 스프링 프레임워크란 ?
자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크. 하드웨어적인 구성이 필요 없는 경량 프레임워크. 자바 개발을 위한 프레임워크로 종속 객체를 생성해주고 조립해주는 기구로 개발자는 자신의 코드에 필요한 객체는 스프링을 통해서 주입받는 구조로 작성된다.
request → dispatcherServlet (web.xml) → controller → 로직 처리 (service, db 접근) → view 전달 → response

⭐ 전자정부 프레임워크란?
대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하는 프레임 워크로 spring, mybatis, jsp, 타일즈의 조합을 이야기 함.

타일즈란? 웹페이지 상단이나 하단에 반복적으로 사용되는 정보를 한 곳으로 모아서 관리하는 프레임워크.
dispatcher servlet 이란?

어플리케이션으로 들어오는 모든 request를 받는 관문. request를 실제로 처리할 controller에게 전달하고 그 결과값을 받아서 view에게 전달하여 적절한 응답을 생성 할 수 있도록 흐름을 제어 함.
톰캣 VS 아파치 : HTTP 웹서버 ↔ 아파치 톰캣 : WAS

의존성 주입 DI 이란?
특정 객체에 필요한 객체를 외부에서 결정해서 연결하는 것을 의미함.
스프링에서 원하는 핵심적인 개념 중 하나라고 생각합니다. 설정 파일을 통해서 객체간의 의존관계를 설정하는 것. 직접 객체를 생성하지 않고 스프링에서 객체를 생성한 뒤에 사용할 객체에 주입시켜서 사용하게 하는 것.
MVC

Model, View, Controller의 합성어로 소프트 웨어 디자인 패턴.
Model : 데이터
View : jsp 파일들과 같이 실제로 보여지는 페이지.
Controller : 사용자들의 요청을 받고 응답을 주는 로직 담당. 사용자가 접근한 url에 따라서 요청사항을 파악하고 요청에 맞는 데이터를 model에 의뢰하고 데이터를 view에 반영해서 사용자에게 보여줌.
장점 : 코드 재사용

Model 1 ↔ Model 2
Model 1 : Controller 영역과 view 영역을 같이 구현하는 방식. 사용자의 요청을 jsp에서 표현하고 정리하고 처리하게 됨. 빠르게 쉽게 개발이 가능하지만 jsp 파일 자체가 너무 비대해지고 향후 유지보수에 어려움을 겪을 수 있음.
Model 2 : Controller 영역과 view 영역을 분리해서 구현한 하는 방식. 웹 브라우저의 요청을 하나의 서블릿이 받게 됨. 서블릿은 웹 브라우저의 요청을 알맞게 처리한 뒤 그 결과를 jsp로 포워딩함. 디자이너와 개발자의 분업이 가능해서 유지보수에 유리하지만 설계에서 어려움을 겪을 수 있음.
(+) Spring MVC 모델 2 : 스프링 MVC 프레임워크는 스프링이 제공하는 DI, AOP등을 쉽게 사용할 수 있음. DispatcherServlet이 mvc에서의 컨트롤러 부분을 처리함.

쿠키와 세션이란?
사용 이유? HTTP의 비연결성, 비상태성이라는 특징을 보완하기 위함 > 서버와 클라이언트가 통신을 할 때 통신이 연속적으로 이어지지 않고 끊어진다면 서버는 클라이언트가 누구인지 계속 인증해야함. 이는 번거롭고 웹 페이지 로딩을 느리게 하는 요인이되기도함. 이런 점을 해결하기 위한 방법이 쿠키와 세션.
비연결성(Connectionless) : 클라이언트가 서버에 요청을 했을 때 그 요청에 맞는 응답을 보낸 후 연결을 끊는 처리 방식.
비상태성(Stateless) : 클라이언트의 상태 정보를 가지지 않는 서버 처리 방식. 첫번째 통신에서 클라이언트와 데이터를 주고 받았다고 해도, 두번째 통신에서는 데이터 유지하지 않음.
쿠키(Cookie) : 서버가 사용자의 웹 브라우저에 저장하는 데이터. Key와 Value로 구성되고 String 형태로 이루어져 있음. 브라우저마다 저장되는 쿠키는 다르고 서버에서는 브라우저가 다르면 다른 사용자로 인식함.
ex) 방문했던 사이트에 다시 방문했을 때 아이디와 비밀번호 자동 입력, 오늘 이 창을 다시 보지 않기 체크
서버가 가지고 있는 것이 아닌 사용자에게 저장되기 때문에 임의로 고치거나 지울 수 있고 가로채기도 쉬어 보안 취약.
세션 (Session) : 일정 시간동안 같은 사용자(브라우저)로부터 들어오는 일련의 요구사항을 하나의 상태로 보고 그 상태를 유지시키는 기술. 웹 브라우저 당 1개씩 생성되어 웹 컨테이너에 저장되며 브라우저 종료시 소멸됨. 저장 데이터에 제한이 없고 각 클라이언트에 고유 Session ID를 보유함.
ex) 화면이 이동해도 로그인이 풀리지 않고 로그아웃하기 전까지 유지 됨
 
servlet vs jsp
Servlet : Java에 html이 삽입
jsp : html에 java가 삽입..

Maven이란?
프로젝트 관리 도구.
settings.xml 또는 pom.xml 파일에 필요한 라이브러리만 적으면 maven 다운로드하고 설치 후 경로까지 지정해 줌.
maven은 프로젝트 관리 도구로 프로젝트의 모든 단계에 사용하는 개발 도구이지만, 가장 많이 사용되는 용도는 프로젝트에 필요한 라이브러리를 자동으로 관리해주는 빌드 도구이다. 필요한 라이브러리 jar파일을 자동으로 다운 받을 수 있다.

AOP란?
Aspect Oriented Programming, 관점 지향 프로그래밍. 객체 지향 프로그래밍에서 기능별로 class를 분리했음에도 로그, 트랜젝션 처럼 공통적으로 반복되는 중복 코드가 발생하는 단점을 해결하고자 나온 방식.
공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과 코드 중복을 해소함.

Springboot vs Spring
스프링 부트는 스프링 프레임워크를 사용하는 프로젝트를 간편하게 셋업할 수 있는 서브 프로젝트임.

Mybatis란?
기존 JDBC를 이용해서 프로그래밍을 하면 자바 소스 안에 sql문을 작성했지만 xml 파일에 sql문을 작성하므로 추수 수정 시에 다른 곳에는 아무런 영향이 없이 xml 파일만 수정하면 됨. 유지보수에 용이하고 가독성이 좋음.
SQL문으로 DB에 접근하다보면 경우에 따라 SQL문 변경이 필요한 경우가 있음. mybatis를 활용해 단편적으로 제어문, 반복등의 처리가 가능하여 동적으로 변경이 가능하다.
스프링과 마이바티스를 연계하는 라이브러리를 이용하면 직접 sql문을 호출하지 않고 자동화 처리가 가능하다 (?)



ORM 이란?
Object-Relational Mapping
객체와 관계형 데이터베이스의 데이터를 자동으로 연결해주는 개념. 객체 간의 관계를 바탕으로 SQL을 자동으로 생성해줌.

request vs response
request : 클라이언트에서 넘어오는 데이터를 받기 위한 객체
response : 서버에서 클라이언트로 데이터를 전달하기 위한 객체

DAO vs DTO
DAO(Data Access Object) 데이터베이스의 데이터에 접근을 위한 객체. 데이터베이스에 접근을 하기 위한 로직과 비즈니스 로직을 분리하기 위해서 사용
DTO(Data Transfer Object)

Annotaion
@Controller : 특정 클래스를 Controller로 등록하는 어노테이션.
@RequestMapping : 컨트롤러로 등록된 클래스 내에 특정 메서드를 요청되는 URL과 매칭시키는 어노테이션.
@Autowired : Spring에서 자동으로 의존성 주입을 하기 위한 어노테이션.
@ResponseBody : 비동기 처리, JSON 형태 데이터 주고 받는 경우
@RequestParam : 단일 파라미터를 전달 받을 때 사용함


