## 객체 지향 설계 5원칙 : SOLID
- 표준화 작업부터 아키텍쳐 설계에 이르기까지 다양하게 적용되는 원칙
- 5개의 원칙의 앞글자를 따서 SOLID라고 부름

SOLID 원칙을 왜 알아야 하는가?
유지보수가 쉽고, 유연하고, 확장이 쉬운 소프트웨어를 만들기 위한 입증
⇒ 더 좋은 프로그래밍을 위해 지향해야할 원칙

SRP (Single responibility principle) 단일 책임 원칙**
= 작성된 클래스는 하나의 기능만을 갖고, 해당 클래스가 제공하는 모든 서비스는 그 하나의 책임을 수행하는데 집중되어 있어야 한다. 

OCP (Open closed principle) 개방 - 폐쇄 원칙**
= 소프트웨어 구성요소(클래스, 모듈, 함수 등)는 확장에는 열려있고, 변경에는 닫혀있어야 한다. 
-기존 코드를 변경하지 않으면서 (closed), 기능을 추가할 수 있도록(open) 설계해야 변경을 위한 비용을 줄이고 확장을 위한 비용을 극대화 할 수 있다.
-OCP를 적용하기 위해서는 각 모듈 간 호출, 의존에 대해서 Interface(추상화)에 의존하도록 설계되어야 한다.

LSP (The Liskov Substitution Principle) 리스코브 치환의 법칙**
= 서브 타입은 언제나 자신의 기반 타입으로 대체할 수 있어야 한다. 
-객체 지향 4대 특성 중 상속과 관련이 높다.
-하위 클래스는 상위 클래스의 한 종류이다. 따라서, 상위 클래스가 들어가는 자리에 하위 클래스를 넣어도 계획대로 잘 동작 해야한다.
-하위 클래스는 상위 클래스의 책임을 무시하거나 재정의 하지 않고 확장만 수행할 수 있도록 해야 한다.

ISP (Interface Segregation Principle) 인터페이스 분리 원칙**
= 어떤 클래스를 인터페이스를 사용해 구현할 때 클래스가 사용하는 기능만을 제공하도록 인터페이스를 분리해야한다.
- 어떤 클래스가 다른 클래스에 종속될 때 최소한의 인터페이스만 사용해야 한다.
- 하나의 일반적인 인터페이스 < 여러 개의 구체적인 인터페이스

DIP (Dependency Inversion Principle) 의존 역전 원칙**
= 의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다 변화가 없는 것에 의존해야 한다. 
- 상위 클래스, 인터페이스, 추상클래스는 변하지 않을 가능성이 높기 때문에 하위 클래스, 구체 클래스보다 의존 관계를 맺을 때 우선적으로 고려되어야 한다.
- 관계를 최대한 느슨하게 만들어야 한다.